                           PORGLEZOMP PROCESSOR
                          A FICTIONAL 16-BIT ISA

Registers
---------

The processor has 8 16-bit registers. Each register can be accessed as a pair
of 8-bit "half-registers" for some instructions

The top 4 registers are aliased by purpose:
* fp is the frame pointer, and points to the bottom of the stack frame
* sp is the stack pointer, and points to the top of the stack
* lr is the link register, the next address is stored in it when the
  BRL pseudoinstruction is called
* pc is the program counter

| r0    | r1    | r2    | r3    | r4    | r5    | r6    | r7    |
| h0 l0 | h1 l1 | h2 l2 | h3 l3 | h4 l4 | h5 l5 | h6 l6 | h7 l7 |
                                | sp    | fp    | lr    | pc    |

Memory
------
The processor has 64KiB of directly addressible RAM.

Instructions
------------

MOV
Usage: MOV <reg dest>, <reg src>
Example: MOV r0, r1
Meaning: The value in r1 will be placed in r0
Instruction format: INSTR(4) DEST(4) SRC(4) 0000
Number: 0

MOVI
Usage: MOVI <halfreg dest>, <imm src>
Example: MOVI l0, 64
Meaning: The value 64 will be placed in the low byte of r0
Instrution format: INSTR(4) DEST(4) VALUE(8)
Number: 1

STR
Usage: STR <reg src>, <reg addr>
Example: STR r3, r0
Meaning: Store the value in r4 at the address pointed to by r0
Instruction format: INSTR(4) SRC(4) ADDR(4) HALF?(1) HALFADDR?(1)
NOTE: Supports half registers

STRI
Usage: STRI <reg src>, <imm relative>
Example: STRI r3, 12
Meaning: Store the value in r4 at fp + 12
Instruction format: INSTR(4) SRC(4) HALF?(1) ADDR(7)
NOTE: Supports half registers

LDR
Usage: LDR <reg dest>, <reg src>
Example: LDR r3, r0
Meaning: Load the value pointed to by r0 into r4
Instruction format: INSTR(4) SRC(4) ADDR(4) HALF?(1) HALFADDR?(1)
NOTE: Supports half registers

LDRI
Usage: LDRI <reg dest>, <imm relative>
Example: LDRI r3, 12
Meaning: Load the value at fp + 12 into r3
Instruction format: INSTR(4) SRC(4) HALF?(1) ADDR(7)
NOTE: Supports half registers